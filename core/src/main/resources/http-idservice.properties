##############################
#  ID service properties     #
##############################
# There are two built in services available.
# By default, the configuration points to the first one (HttpUrl service). To change this,
# You will need to modify the rmapIdService property in /rmap-core/src/main/resources/spring-rmapcore-context.xml
# 1) An HttpUrl Service (info.rmapproject.core.idservice.HttpUrlIdService):
#	 This service requires you to provide a URL for your ID generator. For example, if you use the NOID generator
#	 that is available with the RMap project as a microservice, this could be configured to use it.  The URL
#	 should include all necessary parameters including those that manage e.g. if you want multiple IDs returned
#	 at once.  Consider that numerous round trips to ID services can slow performance, and each DiSCO creation
#	 requires at least 2 IDs be minted so you may wish to retrieve multiple IDs. The service assumes the response
#	 is in plain text with one ID on each line. A list of all IDs will be held in memory until used.
#	 The following are optional settings that can be configured:
#	  - A string to remove (idservice.removeString) - this will remove all instances of the specified string.
#		A regex may also work in some cases
#	  - A prefix (idservice.idPrefix). Once the removeString is complete, the String will be trimmed for
#		whitespace and a prefix added. An ARK minter that is using this service to retrieve NOIDs, for example,
#		might have the prefix "ark\:/12345/"
#	  - Number of retries on failure (idservice.maxRetries). This is the maximum number of times the service
#		will be pinged before an error is thrown.
#	  - A regular expression for validation (idservice.idRegex). Leave blank if you don't wish to validate by regex.
#	  - Length of ID including prefix for validation (idservice.idLength). Leave blank if you don't wish to validate by length.
#	  - Basic Auth user name (idservice.userName).
#	  - Basic Auth password (idservice.userPassword).
#
# 2) Random Number Service (info.rmapproject.core.idservice.RandomNumberIdService)
#	 For small tests, there is a random ID generator that can be used, but it does not exclude duplicates and
# 	 should not be used in a production environment. For this service, set the following:
#	  - A prefix (idservice.idPrefix) to add to the start of the random string.
#	  - A regular expression for validation (idservice.idRegex). Leave blank if you don't wish to validate by regex.
#	  - Length of ID including prefix for validation (idservice.idLength). Leave blank if you don't wish to validate by length.
#
#This URL points to a service that mints unique IDs for inclusion in the RMap object identifiers.
#For example, it could point to a noid minting service. All parameters should be included
#e.g. http://exampleminter.org/idminter/idservice?n=10&exampleparam=abc
#Note that each new DiSCO requires at least 2 IDs, so if multiple round trips to an ID service
#can be avoided, it may have significant impact on performance.
idservice.idMinterUrl=http\://localhost:8080/noid/noid.sh?2

#Prefix to be added to the ID. If you are using an ARK ID service, for example, this would be ark:/
#followed by the Name Assigning Authority Number (NAAN) e.g. "ark\:/12345/"
#For ARK, see http://www.cdlib.org/uc3/naan_table.html for a registry of NAAN.
#Leave blank if no prefix required.
idservice.idPrefix=rmap:
#
#Number of retries on failure to reach service
idservice.maxRetries=2
#
#Where an ID service is used, this character string will be removed from the ID returned
#leave blank if no replace needed.
idservice.replaceString=id: 
#
#Basic Auth user name
idservice.userName=
#
#Basic Auth password
idservice.userPassword=
#
#Length of the ID including prefix to be used for validation of IDs. Leave blank if you do not wish to use this.
idservice.idLength=15
#
#Regular Expression for validation of the ID. RMap will use Java's string.match(regex) to validate.
#Leave blank if you do not wish to use this.  e.g. rmap:[a-z0-9]{10} will check the ID contains
#the prefix "rmap:" followed by at least 10 lowercase letters and/or numbers.
idservice.idRegex=rmap:[a-z0-9]{10}